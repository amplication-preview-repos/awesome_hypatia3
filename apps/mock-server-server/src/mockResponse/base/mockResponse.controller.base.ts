/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { MockResponseService } from "../mockResponse.service";
import { MockResponseCreateInput } from "./MockResponseCreateInput";
import { MockResponse } from "./MockResponse";
import { MockResponseFindManyArgs } from "./MockResponseFindManyArgs";
import { MockResponseWhereUniqueInput } from "./MockResponseWhereUniqueInput";
import { MockResponseUpdateInput } from "./MockResponseUpdateInput";

export class MockResponseControllerBase {
  constructor(protected readonly service: MockResponseService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: MockResponse })
  async createMockResponse(
    @common.Body() data: MockResponseCreateInput
  ): Promise<MockResponse> {
    return await this.service.createMockResponse({
      data: {
        ...data,

        user: data.user
          ? {
              connect: data.user,
            }
          : undefined,
      },
      select: {
        apiPath: true,
        createdAt: true,
        description: true,
        id: true,
        mockData: true,
        name: true,
        title: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [MockResponse] })
  @ApiNestedQuery(MockResponseFindManyArgs)
  async mockResponses(@common.Req() request: Request): Promise<MockResponse[]> {
    const args = plainToClass(MockResponseFindManyArgs, request.query);
    return this.service.mockResponses({
      ...args,
      select: {
        apiPath: true,
        createdAt: true,
        description: true,
        id: true,
        mockData: true,
        name: true,
        title: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: MockResponse })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async mockResponse(
    @common.Param() params: MockResponseWhereUniqueInput
  ): Promise<MockResponse | null> {
    const result = await this.service.mockResponse({
      where: params,
      select: {
        apiPath: true,
        createdAt: true,
        description: true,
        id: true,
        mockData: true,
        name: true,
        title: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: MockResponse })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateMockResponse(
    @common.Param() params: MockResponseWhereUniqueInput,
    @common.Body() data: MockResponseUpdateInput
  ): Promise<MockResponse | null> {
    try {
      return await this.service.updateMockResponse({
        where: params,
        data: {
          ...data,

          user: data.user
            ? {
                connect: data.user,
              }
            : undefined,
        },
        select: {
          apiPath: true,
          createdAt: true,
          description: true,
          id: true,
          mockData: true,
          name: true,
          title: true,
          updatedAt: true,

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: MockResponse })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteMockResponse(
    @common.Param() params: MockResponseWhereUniqueInput
  ): Promise<MockResponse | null> {
    try {
      return await this.service.deleteMockResponse({
        where: params,
        select: {
          apiPath: true,
          createdAt: true,
          description: true,
          id: true,
          mockData: true,
          name: true,
          title: true,
          updatedAt: true,

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
