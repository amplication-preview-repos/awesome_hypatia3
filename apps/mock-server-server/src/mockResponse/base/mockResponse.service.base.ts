/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  MockResponse as PrismaMockResponse,
  User as PrismaUser,
} from "@prisma/client";

export class MockResponseServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.MockResponseCountArgs, "select">
  ): Promise<number> {
    return this.prisma.mockResponse.count(args);
  }

  async mockResponses(
    args: Prisma.MockResponseFindManyArgs
  ): Promise<PrismaMockResponse[]> {
    return this.prisma.mockResponse.findMany(args);
  }
  async mockResponse(
    args: Prisma.MockResponseFindUniqueArgs
  ): Promise<PrismaMockResponse | null> {
    return this.prisma.mockResponse.findUnique(args);
  }
  async createMockResponse(
    args: Prisma.MockResponseCreateArgs
  ): Promise<PrismaMockResponse> {
    return this.prisma.mockResponse.create(args);
  }
  async updateMockResponse(
    args: Prisma.MockResponseUpdateArgs
  ): Promise<PrismaMockResponse> {
    return this.prisma.mockResponse.update(args);
  }
  async deleteMockResponse(
    args: Prisma.MockResponseDeleteArgs
  ): Promise<PrismaMockResponse> {
    return this.prisma.mockResponse.delete(args);
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.mockResponse
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
}
