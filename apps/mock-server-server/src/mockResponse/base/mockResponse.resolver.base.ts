/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { MockResponse } from "./MockResponse";
import { MockResponseCountArgs } from "./MockResponseCountArgs";
import { MockResponseFindManyArgs } from "./MockResponseFindManyArgs";
import { MockResponseFindUniqueArgs } from "./MockResponseFindUniqueArgs";
import { CreateMockResponseArgs } from "./CreateMockResponseArgs";
import { UpdateMockResponseArgs } from "./UpdateMockResponseArgs";
import { DeleteMockResponseArgs } from "./DeleteMockResponseArgs";
import { User } from "../../user/base/User";
import { MockResponseService } from "../mockResponse.service";
@graphql.Resolver(() => MockResponse)
export class MockResponseResolverBase {
  constructor(protected readonly service: MockResponseService) {}

  async _mockResponsesMeta(
    @graphql.Args() args: MockResponseCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [MockResponse])
  async mockResponses(
    @graphql.Args() args: MockResponseFindManyArgs
  ): Promise<MockResponse[]> {
    return this.service.mockResponses(args);
  }

  @graphql.Query(() => MockResponse, { nullable: true })
  async mockResponse(
    @graphql.Args() args: MockResponseFindUniqueArgs
  ): Promise<MockResponse | null> {
    const result = await this.service.mockResponse(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => MockResponse)
  async createMockResponse(
    @graphql.Args() args: CreateMockResponseArgs
  ): Promise<MockResponse> {
    return await this.service.createMockResponse({
      ...args,
      data: {
        ...args.data,

        user: args.data.user
          ? {
              connect: args.data.user,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => MockResponse)
  async updateMockResponse(
    @graphql.Args() args: UpdateMockResponseArgs
  ): Promise<MockResponse | null> {
    try {
      return await this.service.updateMockResponse({
        ...args,
        data: {
          ...args.data,

          user: args.data.user
            ? {
                connect: args.data.user,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => MockResponse)
  async deleteMockResponse(
    @graphql.Args() args: DeleteMockResponseArgs
  ): Promise<MockResponse | null> {
    try {
      return await this.service.deleteMockResponse(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "user",
  })
  async getUser(@graphql.Parent() parent: MockResponse): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
